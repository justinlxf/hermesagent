apply plugin: 'com.android.application'

android {
    compileSdkVersion 26



    defaultConfig {
        applicationId "com.virjar.hermes.wapper_weishi"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    signingConfigs {
        release {
            storeFile rootProject.file('deploy/hermes_key')
            storePassword "hermes"
            keyAlias "hermes"
            keyPassword "hermes"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:26.1.0'
    testImplementation 'junit:junit:4.12'
    //需要增加这两个依赖
    implementation project(':hermes-api')
    compileOnly 'de.robv.android.xposed:api:82'
    implementation 'commons-io:commons-io:2.6'
    implementation 'com.google.guava:guava:23.4-android'
    implementation 'com.alibaba:fastjson:1.1.67.android'
    implementation 'org.apache.commons:commons-lang3:3.7'
}

task deployWrapper(type: Exec, description: 'sync wrapper apk into hermes agent container', dependsOn: 'assembleRelease') {
    File[] apkFiles = file('build/outputs/apk/release').listFiles(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.endsWith('release.apk');
        }
    })
    if (apkFiles == null || apkFiles.length == 0) {
        print 'can not find target apk file'
        return
    }
    File releaseApk = apkFiles[0];
    String uploadPath = '/data/local/tmp/' + releaseApk.name
    commandLine rootProject.file('deploy/syncWrapper.sh').absolutePath, releaseApk.absolutePath, uploadPath
}